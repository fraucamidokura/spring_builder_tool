plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.1'
    id 'com.diffplug.spotless' version '6.25.0'
    id 'net.researchgate.release' version '3.0.2'
}

apply plugin: 'io.spring.dependency-management'

group = 'article.builder.tool'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.apache.commons:commons-lang3'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

processResources {
    filesNotMatching("banner.txt") {
        expand(project.properties)
    }
}

spotless {
    java {
        googleJavaFormat()
    }
    groovyGradle {
        target fileTree('.') {
            include '**/*.gradle', '**/*.groovy'
            exclude '**/build/**', '**/build-*/**'
        }
        greclipse()
        indentWithSpaces(4)
        trimTrailingWhitespace()
        endWithNewline()
    }
}

afterEvaluate {
    def spotless = tasks.findByName('spotlessApply')
    if (spotless) {
        tasks.withType(JavaCompile) {
            finalizedBy(spotless)
        }
        tasks.withType(GroovyCompile) {
            finalizedBy(spotless)
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
def gitHash = 'git rev-parse --verify HEAD'.execute().text.trim()

tasks.named("bootBuildImage") {
    def tag = ${version}
    if (!project.hasProperty('release')) {
        tag = tag + gitHash
    }
    imageName = "ghcr.io/fraucamidokura/spring_builder_tool/task-sample:${tag}"
}

import DockerPushTask

tasks.register("bootPushImage", DockerPushTask){
    group = "build"
    description = "Upload your image to the loged docker registry. You must be loged in docker to call this task"
    imageName = bootBuildImage.imageName.get()
    dependsOn(bootBuildImage)
}

release {
    git {
        pushOptions.set(["--force"])
    }
}

afterReleaseBuild.dependsOn bootPushImage